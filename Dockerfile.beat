# ============================================
# Django + Celery Beat
# ============================================

ARG IMAGE_VERSION=3.13.7-slim-bookworm

# ----------------------------
# Build stage
# ----------------------------
FROM python:${IMAGE_VERSION} AS build

RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy dependencies
COPY pyproject.toml uv.lock ./

# Install uv & sync deps
RUN curl -LsSf https://astral.sh/uv/install.sh | sh && \
    ~/.local/bin/uv sync

# ----------------------------
# Runtime stage
# ----------------------------
FROM python:${IMAGE_VERSION} AS runtime

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    DEBIAN_FRONTEND=noninteractive \
    PATH="/app/.venv/bin:$PATH"

WORKDIR /app

# Install minimal system dependencies for runtime
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    && rm -rf /var/lib/apt/lists/* && \
    # Create system user
    groupadd --system appgroup && \
    useradd --system --gid appgroup --no-create-home --shell /sbin/nologin appuser

# Copy deps & venv from build
COPY --from=build /app /app

# Copy project files
COPY --chown=appuser:appgroup ./ /app

USER appuser

# ----------------------------
# Start Celery Beat  
# ----------------------------
CMD ["celery", "-A", "Inventory_MS", "beat", "--loglevel=debug"]


# Healthcheck: ensure the beat process is alive
HEALTHCHECK --interval=30s --timeout=10s --retries=3 \
    CMD ps aux | grep 'celery beat' | grep -v grep || exit 1
