"""
Django settings for Inventory_MS project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', False)

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(', ')

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8080",
    "https://staging.twara.rw",
    "https://www.staging.twara.rw",
]



# Application definition
INSTALLED_APPS = [
    #IMS apps
    'permission.apps.PermissionConfig',
    'IMS_production.apps.ImsProductionConfig',
    'IMS_admin.apps.AdminConfig',
    'IMS_staff.apps.StaffConfig',
    'sms_tasks.apps.SmsTasksConfig',
    
    #Django apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    #Custom apps
    'authentication',
    'crispy_forms',
    "crispy_bootstrap4",
    "crispy_bootstrap5",
    "django_celery_beat",
    "phonenumber_field",
]


CRISPY_ALLOWED_TEMPLATE_PACKS = [ "bootstrap4", "bootstrap5" ]

CRISPY_TEMPLATE_PACK = "bootstrap5"


MIDDLEWARE = [
    #Defined MidleWare
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    
    #Middle
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Inventory_MS.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR,'authentication/tempelates'),
            os.path.join(BASE_DIR, 'IMS_admin/tempelates'),
            os.path.join(BASE_DIR, 'IMS_staff/tempelates'),
            os.path.join(BASE_DIR, 'IMS_production/tempelates'),
            ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Inventory_MS.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB'),
        'USER': os.getenv('POSTGRES_USER'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
        'HOST': os.getenv('POSTGRES_HOST', 'localhost'),  # Use 'db' when running in Docker
        'PORT': os.getenv('POSTGRES_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', 
    },
]

AUTH_USER_MODEL = 'authentication.User'


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# Static files
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'Inventory_MS/static')]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# Optional: Compress and cache static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = 'login'

# Celery Configuration 
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://redis:6379/0')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://redis:6379/0')


# Email Configuration
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"                       # Use SMTP backend
EMAIL_HOST = "smtp.gmail.com"                                                       # SMTP server
EMAIL_PORT = int(os.getenv("EMAIL_PORT", 587))                                      # TLS port
EMAIL_USE_TLS = bool(os.getenv("EMAIL_USE_TLS", True))                              # Secure connection
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', 'iradukundafils1@gmail.com')          # your email
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")                              # app password (not your Gmail password!)
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER



# SMS Configurations
SMS_API_KEY = os.getenv("SMS_API_KEY", None)
SMS_API = os.getenv("SMS_API", None)
SMS_SENDER = os.getenv("SMS_SENDER", None)



