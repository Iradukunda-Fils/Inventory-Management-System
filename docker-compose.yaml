version: '3.9'

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

volumes:
  postgres_data:
    driver: local

services:
  # ------------------------
  # Django + Gunicorn + Nginx
  # ------------------------
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    image: inventory_ms:latest
    container_name: inventory_ms
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "80:8080"
    networks:
      - backend
      - frontend

  # ------------------------
  # Celery Worker
  # ------------------------
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    image: celery_ms:latest
    container_name: celery_worker
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - backend
    command: celery -A Inventory_MS worker --concurrency=1 -l info  

  # ------------------------
  # Celery Beat (Scheduler)
  # ------------------------
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.beat
    image: celery_ms:latest
    container_name: celery_beat
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - backend
    command: celery -A Inventory_MS beat -l info

  # ------------------------
  # PostgreSQL Database
  # ------------------------
  db:
    image: postgres:17-alpine                   
    container_name: postgres
    restart: always
    env_file:
      - .env
    environment:
      # Ensures proper locale at init time
      POSTGRES_INITDB_ARGS: "--locale=en_US.UTF-8"
      # Always good to make encoding explicit
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
    expose:
      - "5432"
    networks:
      - backend
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5


  # ------------------------
  # Redis (Broker / Cache)
  # ------------------------
  redis:
    image: redis:7.2.10-alpine
    container_name: redis
    restart: always
    expose:
      - "6379"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
